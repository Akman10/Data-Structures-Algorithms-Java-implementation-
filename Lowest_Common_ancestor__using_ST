import java.io.*;
import java.util.*;

class ques2
{
	public static void main(String[] args)throws Exception{ new ques2().run();} 
	long mod=1000000000+7;
	ArrayList<Integer> adj[];
	int start[];
	int end[];
	int euler[];
	int time;
	int t[];
	int N;
	int level[];
	void init(int N)
	{
		adj=new ArrayList[N+1];
		for (int i = 0; i < adj.length; i++) 
			adj[i]=new ArrayList<>();
		start=new int[N+1];
		end=new int[N+1];
		euler=new int[2*N];
		level=new int[N+1];
		time=0;
		t=new int[8*N];
	}
	void solve() throws Exception
	{
		int test=ni();
		for(int ii=1;ii<=test;ii++)
		{
			out.println("Case "+ii+":");
			  N=ni();
			 init(N);
			for(int i=1;i<=N;i++)
			{
				int M=ni();
				for(int j=0;j<M;j++)
				{
					int x=ni();
					adj[i].add(x);
					adj[x].add(i);
				}
			}
			dfs(1,-1);
			build(1,0,(2*N)-1);
			int q=ni();
			for(int i=0;i<q;i++)
			{
				int u=ni();
				int v=ni();
				out.println(lca(u,v));
			}
		}
	}
	void build(int v,int tl, int tr)
	{
		if(tl==tr)
		{
			t[v]=euler[tl];
			return;
		}
		int tm=(tl+tr)/2;
		build(v<<1,tl,tm);
		build(v<<1 | 1,tm+1,tr);
		t[v]=(level[t[v<<1]]<level[t[v<<1 | 1]])? t[v<<1]: t[v<<1 | 1];
	}
	int get(int v, int tl, int tr, int l, int r)
	{
		if(l>tr||r<tl)return  -1;
		if(tl>=l&&tr<=r)
			return t[v];
		int tm=(tl+tr)/2;
		int le=get(v<<1,tl,tm,l,r);
		int ri=get(v<<1 | 1,tm+1,tr,l,r);
		if(le== -1) return ri;
		if(ri== -1) return le;
		return (level[le] < level[ri]) ? le : ri;
	}
	int lca(int u,int v)
	{
		if(start[v]<start[u])
		{
			int temp=u;
		    u=v;
		    v=temp;
		}
		return get(1,0,(2*N)-1,start[u],start[v]);
	}
	void dfs(int u, int par)
	{
		euler[time]=u;
		start[u]=time++;
		for(int v:adj[u])
		{
			if(v==par)continue;
			level[v]=level[u]+1;
			dfs(v,u);
			euler[time++]=u;
		}
	}
	
	/*IMPLEMENTATION BY AMAN KOTIYAL, FAST INPUT OUTPUT & METHODS BELOW*/
	
	private byte[] buf=new byte[1024];
	private int index;
	private InputStream in;
	private int total;
	private SpaceCharFilter filter;
	PrintWriter out;
	
	int gcd(int a, int b) 
	{ 
		if (a == 0) 
			return b; 
		return gcd(b%a, a); 
	} 
	long gcd(long a, long b) 
	{ 
		if (a == 0) 
			return b; 
		return gcd(b%a, a); 
	}
	/* for (1/a)%mod = ( a^(mod-2) )%mod  ----> use expo to calc -->(a^(mod-2)) */
	long expo(long p,long q)  /*  (p^q)%mod   */
	{
		long z = 1;
		while (q>0) {
			if (q%2 == 1) {
				z = (z * p)%mod;
			}
			p = (p*p)%mod;
			q >>= 1;
		}
		return z;
	}
	void run()throws Exception
	{
		in=System.in; out = new PrintWriter(System.out);
		solve();
		out.flush();
	}
	private int scan()throws IOException
	{
		if(total<0)
			throw new InputMismatchException();
		if(index>=total)
		{
			index=0;
			total=in.read(buf);
			if(total<=0)
				return -1;
		}
		return buf[index++];
	}
	private int ni() throws IOException 
	{
		int c = scan();
		while (isSpaceChar(c))
			c = scan();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = scan();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = scan();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
	private long nl() throws IOException 
	{
		long num = 0;
		int b;
		boolean minus = false;
		while ((b = scan()) != -1 && !((b >= '0' && b <= '9') || b == '-'))
			;
		if (b == '-') {
			minus = true;
			b = scan();
		}
		
		while (true) {
			if (b >= '0' && b <= '9') {
				num = num * 10 + (b - '0');
			} else {
				return minus ? -num : num;
			}
			b = scan();
		}
	}
	private double nd() throws IOException{
		return Double.parseDouble(ns());
	}
	private String ns() throws IOException {
		int c = scan();
		while (isSpaceChar(c))
			c = scan();
		StringBuilder res = new StringBuilder();
		do {
			if (Character.isValidCodePoint(c))
				res.appendCodePoint(c);
			c = scan();
		} while (!isSpaceChar(c));
		return res.toString();
	}
	private String nss() throws IOException
	{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		return br.readLine();
	}
	private char nc() throws IOException 
	{
		int c = scan();
		while (isSpaceChar(c))
			c = scan();
		return (char) c;
	}
	private boolean isWhiteSpace(int n)
	{
		if(n==' '||n=='\n'||n=='\r'||n=='\t'||n==-1)
			return true;
		return false;
	}
	private boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return isWhiteSpace(c);
	}
	private interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
}
